{"mappings":"ACmCA,SAAS,EAAU,CAAU,EAC3B,IAAI,EAEJ,OAAQ,EAAW,MAAM,CAAC,SAAS,EACjC,IAAK,OACH,EAAa,SAAC,CAAA,CAAa,CAA3B,SACE,AAAI,EAAY,IAAI,CAAG,EAAa,IAAI,CAC/B,EACE,EAAY,IAAI,CAAG,EAAa,IAAI,CACtC,GAEA,CAEX,EACA,KACF,KAAK,WACH,EAAa,SAAC,CAAA,CAAa,CAA3B,SACE,AAAI,EAAY,QAAQ,CAAG,EAAa,QAAQ,CACvC,EACE,EAAY,QAAQ,CAAG,EAAa,QAAQ,CAC9C,GAEA,CAEX,EACA,KACF,KAAK,MACH,EAAa,SAAC,CAAA,CAAa,CAA3B,EACE,OAAA,EAAY,GAAG,CAAG,EAAa,GAAG,A,EACpC,KACF,KAAK,SACH,EAAa,SAAC,CAAA,CAAa,CAA3B,EACE,OAAA,EAAY,MAAM,CAAG,EAAa,MAAM,A,CAC9C,CAEA,EAAO,IAAI,CAAC,GAEZ,AA9DF,WACE,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAW,SAAS,aAAa,CAAC,SAEnC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAgB,CAAA,CAAA,OAAA,QAAA,CAAA,GAAhB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,GAAA,A,WAAK,IAAM,EAAN,EAAA,KAAA,CACG,EAAM,SAAS,aAAa,CAAC,MAC7B,EAAQ,MAAM,IAAI,CAAC,CAAE,OAAQ,CAAE,EAAG,WAAM,OAAA,SAAS,aAAa,CAAC,K,GAE7D,EAA4C,EAA5C,IAAA,CAAkB,EAA0B,EAA1B,QAAA,CAAU,EAAgB,EAAhB,GAAA,CAAK,EAAW,EAAX,MAAzC,AAEA,CAAA,CAAK,CAAC,EAAE,CAAC,WAAW,CAAG,EACvB,CAAK,CAAC,EAAE,CAAC,WAAW,CAAG,EACvB,CAAK,CAAC,EAAE,CAAC,WAAW,CAAG,EACvB,CAAK,CAAC,EAAE,CAAC,WAAW,CAAG,IAAM,AArBjC,SAAS,EAAyB,CAAI,SACpC,AAAI,EAAK,MAAM,EAAI,EACV,EAGF,EAAyB,EAAK,KAAK,CAAC,EAAG,KAAO,IAAM,EAAK,KAAK,CAAC,GACxE,EAe0D,EAAO,QAAQ,IAErE,EAAM,OAAO,CAAC,SAAC,CAAf,EACE,EAAI,MAAM,CAAC,EACb,GAEA,EAAS,MAAM,CAAC,EAClB,G,C,M,E,CAhBK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAkBL,EAAM,WAAW,CAAC,EACpB,GAwCA,CAEA,IAAM,EAAO,SAAS,gBAAgB,CAAC,YACjC,EAAS,EAAE,CACX,EAAU,SAAS,gBAAgB,CAAC,YAE1C,EAAK,OAAO,CAAC,SAAC,CAAd,EACE,IAAM,EAAQ,EAAI,QAAQ,CAE1B,EAAO,IAAI,CAAC,CACV,KAAM,CAAK,CAAC,EAAE,CAAC,SAAS,CACxB,SAAU,CAAK,CAAC,EAAE,CAAC,SAAS,CAC5B,IAAK,SAAS,CAAK,CAAC,EAAE,CAAC,SAAS,EAChC,OAAQ,SAAS,CAAK,CAAC,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,IAAK,IAAI,KAAK,CAAC,GAC7D,EACF,GAEA,EAAQ,OAAO,CAAC,SAAC,CAAjB,EACE,EAAO,gBAAgB,CAAC,QAAS,EACnC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction addCommasEveryThreeChars(text) {\n    if (text.length <= 3) return text;\n    return addCommasEveryThreeChars(text.slice(0, -3)) + \",\" + text.slice(-3);\n}\nfunction refreshTable() {\n    var tBody = document.querySelector(\"tbody\");\n    var newTBody = document.createElement(\"tbody\");\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        var _loop = function() {\n            var person = _step.value;\n            var row = document.createElement(\"tr\");\n            var cells = Array.from({\n                length: 4\n            }, function() {\n                return document.createElement(\"td\");\n            });\n            var personName = person.name, position = person.position, age = person.age, salary = person.salary;\n            cells[0].textContent = personName;\n            cells[1].textContent = position;\n            cells[2].textContent = age;\n            cells[3].textContent = \"$\" + addCommasEveryThreeChars(salary.toString());\n            cells.forEach(function(cell) {\n                row.append(cell);\n            });\n            newTBody.append(row);\n        };\n        for(var _iterator = people[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    tBody.replaceWith(newTBody);\n}\nfunction sortTable(tableEvent) {\n    var comparator;\n    switch(tableEvent.target.innerText){\n        case \"Name\":\n            comparator = function(firstPerson, secondPerson) {\n                if (firstPerson.name > secondPerson.name) return 1;\n                else if (firstPerson.name < secondPerson.name) return -1;\n                else return 0;\n            };\n            break;\n        case \"Position\":\n            comparator = function(firstPerson, secondPerson) {\n                if (firstPerson.position > secondPerson.position) return 1;\n                else if (firstPerson.position < secondPerson.position) return -1;\n                else return 0;\n            };\n            break;\n        case \"Age\":\n            comparator = function(firstPerson, secondPerson) {\n                return firstPerson.age - secondPerson.age;\n            };\n            break;\n        case \"Salary\":\n            comparator = function(firstPerson, secondPerson) {\n                return firstPerson.salary - secondPerson.salary;\n            };\n    }\n    people.sort(comparator);\n    refreshTable();\n}\nvar rows = document.querySelectorAll(\"tbody tr\");\nvar people = [];\nvar headers = document.querySelectorAll(\"thead th\");\nrows.forEach(function(row) {\n    var cells = row.children;\n    people.push({\n        name: cells[0].innerText,\n        position: cells[1].innerText,\n        age: parseInt(cells[2].innerText),\n        salary: parseInt(cells[3].innerText.replace(\",\", \"\").slice(1))\n    });\n});\nheaders.forEach(function(header) {\n    header.addEventListener(\"click\", sortTable);\n});\n\n//# sourceMappingURL=index.bf701bbb.js.map\n","'use strict';\n\nfunction addCommasEveryThreeChars(text) {\n  if (text.length <= 3) {\n    return text;\n  }\n\n  return addCommasEveryThreeChars(text.slice(0, -3)) + ',' + text.slice(-3);\n}\n\nfunction refreshTable() {\n  const tBody = document.querySelector('tbody');\n  const newTBody = document.createElement('tbody');\n\n  for (const person of people) {\n    const row = document.createElement('tr');\n    const cells = Array.from({ length: 4 }, () => document.createElement('td'));\n\n    const { name: personName, position, age, salary } = person;\n\n    cells[0].textContent = personName;\n    cells[1].textContent = position;\n    cells[2].textContent = age;\n    cells[3].textContent = '$' + addCommasEveryThreeChars(salary.toString());\n\n    cells.forEach((cell) => {\n      row.append(cell);\n    });\n\n    newTBody.append(row);\n  }\n\n  tBody.replaceWith(newTBody);\n}\n\nfunction sortTable(tableEvent) {\n  let comparator;\n\n  switch (tableEvent.target.innerText) {\n    case 'Name':\n      comparator = (firstPerson, secondPerson) => {\n        if (firstPerson.name > secondPerson.name) {\n          return 1;\n        } else if (firstPerson.name < secondPerson.name) {\n          return -1;\n        } else {\n          return 0;\n        }\n      };\n      break;\n    case 'Position':\n      comparator = (firstPerson, secondPerson) => {\n        if (firstPerson.position > secondPerson.position) {\n          return 1;\n        } else if (firstPerson.position < secondPerson.position) {\n          return -1;\n        } else {\n          return 0;\n        }\n      };\n      break;\n    case 'Age':\n      comparator = (firstPerson, secondPerson) =>\n        firstPerson.age - secondPerson.age;\n      break;\n    case 'Salary':\n      comparator = (firstPerson, secondPerson) =>\n        firstPerson.salary - secondPerson.salary;\n  }\n\n  people.sort(comparator);\n\n  refreshTable();\n}\n\nconst rows = document.querySelectorAll('tbody tr');\nconst people = [];\nconst headers = document.querySelectorAll('thead th');\n\nrows.forEach((row) => {\n  const cells = row.children;\n\n  people.push({\n    name: cells[0].innerText,\n    position: cells[1].innerText,\n    age: parseInt(cells[2].innerText),\n    salary: parseInt(cells[3].innerText.replace(',', '').slice(1)),\n  });\n});\n\nheaders.forEach((header) => {\n  header.addEventListener('click', sortTable);\n});\n"],"names":["sortTable","tableEvent","comparator","target","innerText","firstPerson","secondPerson","name","position","age","salary","people","sort","refreshTable","tBody","document","querySelector","newTBody","createElement","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_loop","person","value","row","cells","Array","from","length","personName","textContent","addCommasEveryThreeChars","text","slice","toString","forEach","cell","append","err","return","replaceWith","rows","querySelectorAll","headers","children","push","parseInt","replace","header","addEventListener"],"version":3,"file":"index.bf701bbb.js.map"}